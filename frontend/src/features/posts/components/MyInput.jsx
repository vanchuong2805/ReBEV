// src/components/common/MyInputPlus.jsx
// üìå Input component d√πng chung cho c√°c variation field:
// - H·ªó tr·ª£ danh s√°ch ch·ªçn (dropdown) ho·∫∑c nh·∫≠p tay (free text)
// - N·∫øu c√≥ options -> hi·ªán dropdown ƒë·ªÉ ch·ªçn
// - N·∫øu kh√¥ng c√≥ options -> cho ph√©p g√µ t·ª± do (vd: Bi·ªÉn s·ªë, s·ªë km...)
// - Kh√¥ng sort l·∫°i theo alphabet, gi·ªØ nguy√™n th·ª© t·ª± trong DB

import React, { useEffect, useMemo, useRef, useState } from "react";

export function MyInput({
  options = [], // m·∫£ng [{ id, value, label }] ho·∫∑c string
  value = "",
  onChange, // callback khi gi√° tr·ªã thay ƒë·ªïi
  placeholder = "Ch·ªçn...",
  allowFreeText = false, // m·∫∑c ƒë·ªãnh kh√¥ng cho g√µ, ch·ªâ b·∫≠t khi kh√¥ng c√≥ options
  parseOption = (opt) => ({
    id: opt?.id,
    value: typeof opt === "string" ? opt : opt?.value ?? opt?.label ?? "",
    label: typeof opt === "string" ? opt : opt?.label ?? opt?.value ?? "",
  }),
  className = "",
  disabled = false,
}) {
  const [open, setOpen] = useState(false);
  const [query, setQuery] = useState("");
  const boxRef = useRef(null);

  const parsed = useMemo(
    () => options.map(parseOption),
    [options, parseOption]
  );

  // L·ªçc theo t·ª´ kho√° t√¨m ki·∫øm trong dropdown
  const list = useMemo(() => {
    const q = query.trim().toLowerCase();
    if (!q) return parsed;
    return parsed.filter((o) => o.label.toLowerCase().includes(q));
  }, [parsed, query]);

  // L·∫•y nh√£n hi·ªÉn th·ªã (khi ch·ªçn ho·∫∑c g√µ)
  const selectedLabel = useMemo(() => {
    const found = parsed.find((o) => o.value === value || o.label === value);
    if (found) return found.label;
    // N·∫øu kh√¥ng c√≥ trong danh s√°ch v√† ƒë∆∞·ª£c ph√©p g√µ -> hi·ªÉn th·ªã ch√≠nh gi√° tr·ªã ƒëang g√µ
    return allowFreeText && typeof value === "string" ? value : "";
  }, [parsed, value, allowFreeText]);

  // ƒê√≥ng dropdown khi click ra ngo√†i
  useEffect(() => {
    function onClickOutside(e) {
      if (boxRef.current && !boxRef.current.contains(e.target)) setOpen(false);
    }
    document.addEventListener("mousedown", onClickOutside);
    return () => document.removeEventListener("mousedown", onClickOutside);
  }, []);

  function handlePick(opt) {
    setOpen(false);
    onChange && onChange(opt.value);
  }

  const hasOptions = parsed.length > 0;

  return (
    <div
      className={`relative w-full ${disabled ? "opacity-60" : ""}`}
      ref={boxRef}
    >
      <input
        type="text"
        value={selectedLabel}
        placeholder={placeholder}
        onClick={() => !disabled && hasOptions && setOpen((o) => !o)}
        readOnly={!allowFreeText}
        onChange={(e) => {
          if (allowFreeText) onChange && onChange(e.target.value);
        }}
        className={`w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${className}`}
        disabled={disabled}
      />

      {/* Dropdown */}
      {open && hasOptions && (
        <div className="absolute z-10 w-full mt-1 bg-white border border-gray-300 rounded-md shadow-lg">
          <div className="p-2">
            <input
              autoFocus
              value={query}
              onChange={(e) => setQuery(e.target.value)}
              placeholder="T√¨m ki·∫øm..."
              className="w-full px-2 py-1 text-sm border border-gray-200 rounded"
            />
          </div>
          <div className="overflow-y-auto max-h-60">
            {list.length === 0 && (
              <div className="px-3 py-2 text-sm text-gray-500">
                Kh√¥ng c√≥ d·ªØ li·ªáu
              </div>
            )}
            {list.map((o) => (
              <div
                key={`${o.id ?? o.value}`}
                onClick={() => handlePick(o)}
                className="px-3 py-2 text-sm cursor-pointer hover:bg-gray-100"
              >
                {o.label}
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  );
}
